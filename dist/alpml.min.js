(()=>{const defineComponent=(name,source="")=>{const componentName=name,template=parseTemplate(source),component=class extends HTMLElement{static observedAttributes=[...template.props];constructor(){self=super(),self.isInitialized=!1,self.displayNode=void 0,self.template={...template},self.state={$key:`${Math.random()}`}}connectedCallback(){self.displayNode=render(self.parentNode,self.displayNode,self.template,self.state),self.dispatchEvent(new Event("initialized"))}attributeChangedCallback(name,oldValue,newValue){if(oldValue!==newValue){if(self.state[name]=newValue,!self.isInitialized)return void(self.isInitialized=!0);self.displayNode=render(self.parentNode,self.displayNode,self.template,self.state),self.dispatchEvent(new Event("attributesUpdated"))}}};window.customElements.define(`${componentName}`,component)};function render(parentNode,displayNode,template,state){const{openingTag:openingTag,innerHTML:rawHTML}=template,innerHTML=function(htmlStr,context){const childPlaceholder=`<div data-alp-kids='${context.$key}' style='display: none;'></div>`;let result="";const matches=htmlStr.matchAll(/\$\{(\s*)?([a-zA-Z0-9_]*)(\s*)?\}/g);let cursor=0;for(const match of matches){result+=htmlStr.slice(cursor,match.index),cursor=match.index+match[0].length;const key=match[2];result+=`${"children"===key?childPlaceholder:context[key]||""}`}return result+=htmlStr.slice(cursor),result}(rawHTML,state),node=document.createElement(openingTag);return node.innerHTML=innerHTML,node.dataset.key=state.$key,isParentWebComponent=parentNode.tagName.includes("-"),displayNode?(displayNode.replaceWith(node),node):isParentWebComponent?(parentNode.displayNode&&insertChildNode(parentNode,node),parentNode.addEventListener("initialized",(event=>insertChildNode(event.target,node))),node):(parentNode.appendChild(node),node)}function insertChildNode(parentNode,node){try{const selector=`[data-alp-kids="${parentNode.state.$key}"]`,nodes=parentNode.displayNode.querySelectorAll(selector),lastNode=nodes[nodes.length-1];lastNode&&lastNode.after(node)}catch(error){console.error(error)}}function parseTemplate(templateStr,level=0){const openingTagEnd=templateStr.indexOf(">"),closingTagStart=templateStr.lastIndexOf("</"),rawOpeningTag=templateStr.slice(void 0,openingTagEnd),innerHTML=templateStr.slice(openingTagEnd+1,closingTagStart);let closingTag=templateStr.slice(closingTagStart,void 0);closingTag=closingTag.replaceAll(/<|>|\s|\//g,"");const openingTag=rawOpeningTag.trim().split(" ")[0].replaceAll(/<|>|\s|\//g,"");if(openingTag!==closingTag)throw TypeError(`malformed template, opening and closing tags, '${openingTag}' and '${closingTag}' don't match`);if(!openingTag)throw TypeError(`template missing a root tag, '${templateStr}'`);if("template"===openingTag&&level<1){return{...parseTemplate(innerHTML,level+1),props:extractProps(rawOpeningTag)}}return{openingTag:openingTag,innerHTML:innerHTML,closingTag:closingTag,props:[]}}function extractProps(templateTag){const propsString=(/props="?'?([a-zA-Z,0-9_\-]*)"?'?/.exec(templateTag)||[])[1];return propsString?propsString.split(",").map((v=>v.trim())):[]}(()=>{const alpineJsUrl="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js";!function(alpineJsUrl){const headNode=document.getElementsByTagName("head")[0];window.isAlpineLoaded=!1;const alpineScript=document.createElement("script");alpineScript.setAttribute("src",alpineJsUrl),alpineScript.setAttribute("defer","true"),alpineScript.addEventListener("load",(()=>{window.isAlpineLoaded=!0})),headNode.appendChild(alpineScript)}(alpineJsUrl),function(alpineJsUrl,componentsSelector,eventName){const nodes=document.querySelectorAll(componentsSelector);window.unloadedComponents=nodes.length,nodes.forEach((node=>{node.addEventListener("load",(()=>{window.unloadedComponents-=1;if(window.unloadedComponents<=0){window.isAlpineLoaded&&document.dispatchEvent(new Event(eventName));const alpineNode=document.querySelector(`script[src='${alpineJsUrl}']`);alpineNode?.addEventListener("load",(()=>{document.dispatchEvent(new Event(eventName))}))}}))}))}(alpineJsUrl,"object[type='text/x-alpml']","componentsLoaded"),document.addEventListener("componentsLoaded",(()=>{!function(componentsSelector){const nodes=document.querySelectorAll(componentsSelector);nodes.forEach((node=>{const name=node.getAttribute("is")||"";if(!name.includes("-"))throw TypeError("An 'is' attribute with a hyphenated value is required");const templates=node.contentDocument?.getElementsByTagName("pre"),source=templates&&templates[0].innerText;source&&defineComponent(name,source);node.parentElement.removeChild(node);const webComponentNodes=document.getElementsByTagName(name);for(const v of webComponentNodes)v.parentElement.replaceChild(v,v);console.log("loaded component ",node.getAttribute("is"))}))}("object[type='text/x-alpml']")}))})()})();